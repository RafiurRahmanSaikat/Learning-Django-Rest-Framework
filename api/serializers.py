from django.db import transaction
from rest_framework import serializers

from .models import Order, OrderItem, Product


class ProductSerializer(serializers.ModelSerializer):
    id = serializers.UUIDField(read_only=True)

    class Meta:
        model = Product
        fields = (
            "id",
            "name",
            "description",
            "price",
            "stock",
        )

    def validate_price(self, value):
        if value <= 0:
            raise serializers.ValidationError("Price must be grater than 0 .")
        return value


class OrderItemSerializer(serializers.ModelSerializer):
    product_name = serializers.CharField(source="product.name")
    product_price = serializers.DecimalField(
        max_digits=10, decimal_places=2, source="product.price"
    )

    class Meta:
        model = OrderItem
        fields = (
            "product_name",
            "product_price",
            "quantity",
            "item_subtotal",
        )


class OrderSerializer(serializers.ModelSerializer):
    order_id = serializers.UUIDField(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    total_price = serializers.SerializerMethodField(method_name="total")

    def total(self, obj):
        order_items = obj.items.all()
        return sum(order_item.item_subtotal for order_item in order_items)

    class Meta:
        model = Order
        fields = (
            "order_id",
            "created_at",
            "user",
            "status",
            "items",
            "total_price",
        )

    #! update the order(Parent) instance not the orderItem(Children)  instance
    # {
    # 	"status": "Pending", #!-->  this is the order instance(Parent)
    # 	"items": [           #!-->  this is the Children instance("items")
    # 		{
    # 				"product": 10,
    # 				"quantity": 20
    # 		},
    # 		{
    # 				"product": 3,
    # 				"quantity": 1
    # 		}
    # 	]
    # }

    #! items is not an inbuilt Django function; it is the reverse relationship field generated by the related_name="items" in the ForeignKey of the OrderItem model. This allows you to access all OrderItem instances related to a particular Order instance using instance.items.


class OrderCreateSerializer(serializers.ModelSerializer):
    class OrderItemSerializer(serializers.ModelSerializer):
        class Meta:
            model = OrderItem
            fields = ("product", "quantity")

    order_id = serializers.UUIDField(read_only=True)
    items = OrderItemSerializer(many=True, required=False)

    def update(self, instance, validated_data):
        orderItem_data = validated_data.pop("items", None)

        with transaction.atomic():

            instance = super().update(instance, validated_data)

            if orderItem_data is not None:
                instance.items.all().delete()
                for item in orderItem_data:
                    OrderItem.objects.create(order=instance, **item)

        return instance

    def create(self, validated_data):
        orderItem_data = validated_data.pop("items")
        order = Order.objects.create(**validated_data)

        for item in orderItem_data:
            OrderItem.objects.create(order=order, **item)

        return order

    class Meta:
        model = Order
        fields = (
            "order_id",
            "user",
            "status",
            "items",
        )
        extra_kwargs = {"user": {"read_only": True}}


class ProductsInfoSerializer(serializers.Serializer):
    products = ProductSerializer(many=True)
    count = serializers.IntegerField()
    max_price = serializers.FloatField()
